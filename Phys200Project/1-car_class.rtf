{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13660\viewh11700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 \
\
class Car(object):\
	"""does car things"""\
	#initializes the car\
	def __init__(self,pos=0, v=0, vmax = 0, p=0, cruise_control=False):\
		self.pos = pos\
		self.v = v\
		self.vmax = vmax\
		self.p = p\
		self.cruise_control = cruise_control\
	#checks how many spaces are in front	\
	def check_front(self,array):\
		arr = array\
		i=1\
		while pos+i <= len(arr):\
			#checks if the car leaves the array\
			if pos+i >= len(arr):\
				if arr[0] == 0:\
					self.pos = 0\
					return i + check_front()\
				else:\
					return len(arr)\
			#+1 to empty space count\
			elif arr[pos+1] == 0:\
				i = i+1\
			#returns number of empty spaces ahead of it\
			else:\
				return pos+i-1\
	#makes v\
	def check_velocity(self,array):\
		arr = array\
		#sets v = to g\
		if self.v > check_front(arr) or self.v < check_front(arr):\
			self.v = self.g\
			#random chance of reducing speed\
			if self.p > random() and self.v != self.vmax and cruise_control==True:\
				self.v = self.v - 1\
				return v\
			else:\
				return v\
		else:\
			if self.p > random() and self.v != self.vmax and cruise_control==True:\
				self.v = self.v - 1\
				return v\
			else:\
				return v\
	def move_car(self,array):\
		arr = array\
		x = self.pos + check_velocity(arr)\
		#checks is the new position is greater than the length of the array and loops the car through\
		if x >= len(arr):\
			return x - len(arr)\
		else:\
			return x\
	def set_velocity(array):\
		arr = array\
		self.v = check_velocity(arr)}